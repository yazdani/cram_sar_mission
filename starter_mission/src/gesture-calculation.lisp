;;; Copyright (c) 2016, Fereshta Yazdani <yazdani@cs.uni-bremen.de>
;;; All rights reserved.
;; 
;;; Redistribution and use in source and binary forms, with or without
;;; modification, are permitted provided that the following conditions are met:
;;; 
;;;     * Redistributions of source code must retain the above copyright
;;;       notice, this list of conditions and the following disclaimer.
;;;     * Redistributions in binary form must reproduce the above copyright
;;;       notice, this list of conditions and the following disclaimer in the
;;;       documentation and/or other materials provided with the distribution.
;;;     * Neither the name of the Institute for Artificial Intelligence/
;;;       Universitaet Bremen nor the names of its contributors may be used to 
;;;       endorse or promote products derived from this software without 
;;;       specific prior written permission.
;;; 
;;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
;;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;;; POSSIBILITY OF SUCH DAMAGE.

(in-package :starter-mission)


;;###################################################################################################################################################################################################################################################################################################################################################################################################################POINTING GESTURE CALCULATIONS###########################################################################################################################################################################################################################################################################################################################################################################################################################################################################;;

(defun give-pointed-at-not-bboxes (point)
  (let*((sem-map  (sem-map:get-semantic-map))
        (elem NIL)
        (num (make-list 100))
        (sem-hash (slot-value sem-map 'sem-map-utils:parts))
        (sem-keys (hash-table-keys sem-hash))
        (liste-tr (list-the-values num point))
        (liste-up (all-the-points-ups liste-tr))
        (liste-down (all-the-points-downs liste-tr))
        (liste-right (all-the-points-rights liste-tr))
        (liste-left (all-the-points-lefts liste-tr))
        (liste-front (all-the-points-fronts liste-tr))
        (liste-back (all-the-points-backs liste-tr)))
    (dotimes (jindex (length liste-tr))
      do (dotimes(jo (length sem-keys))
          do(let* ((pose (cl-transforms:origin (slot-value (gethash (nth jo sem-keys) sem-hash) 'sem-map-utils:pose)))
                   (npoint (cl-transforms:origin (nth jindex liste-tr)))
                   (upoint (cl-transforms:origin (nth jindex liste-up)))
                   (dpoint (cl-transforms:origin (nth jindex liste-down)))
                   (rpoint (cl-transforms:origin (nth jindex liste-right)))
                   (lpoint (cl-transforms:origin (nth jindex liste-left)))
                   (fpoint (cl-transforms:origin (nth jindex liste-front)))
                   (bpoint (cl-transforms:origin (nth jindex liste-back)))
                   (value (checker-at-distance pose npoint))
                   (uvalue (checker-at-distance pose upoint))
                   (dvalue (checker-at-distance pose dpoint))
                   (rvalue (checker-at-distance pose rpoint))
                   (lvalue (checker-at-distance pose lpoint))
                   (fvalue (checker-at-distance pose fpoint))
                   (bvalue (checker-at-distance pose  bpoint)))
                  (cond ((and (or (equal value T)
                                  (equal uvalue T)
                                  (equal dvalue T)
                                  (equal rvalue T)
                                  (equal lvalue T)
                                  (equal fvalue T)
                                  (equal bvalue T))
                             (not (equal (nth jo sem-keys)
                                         (find (nth jo sem-keys)
                                           elem :test #'equal))))
                        (location-costmap:publish-point  (cl-transforms:origin (nth jindex liste-tr)) :id (+ (+ jo jindex) 1000))
                        (location-costmap:publish-point  (cl-transforms:origin (nth jindex liste-right)) :id (+ (+ jo jindex) 2000))
                        (location-costmap:publish-point  (cl-transforms:origin (nth jindex liste-left)) :id (+ (+ jo jindex) 3000))
                         (location-costmap:publish-point  (cl-transforms:origin (nth jindex liste-front)) :id (+ (+ jo jindex) 4000))
                        (location-costmap:publish-point  (cl-transforms:origin (nth jindex liste-back )) :id (+ (+ jo jindex) 5000))
                        (location-costmap:publish-point  (cl-transforms:origin (nth jindex liste-up)) :id (+ (+ jo jindex) 6000))
                        (location-costmap:publish-point  (cl-transforms:origin (nth jindex liste-down)) :id (+ (+ jo jindex) 7000))
                        (setf elem (append (list (nth jo sem-keys)) elem)))
                        
                       (t
                         (location-costmap:publish-point  (cl-transforms:origin (nth jindex liste-tr)) :id (+ (+ jo jindex) 11000))
                        (location-costmap:publish-point  (cl-transforms:origin (nth jindex liste-right)) :id (+ (+ jo jindex) 22000))
                        (location-costmap:publish-point  (cl-transforms:origin (nth jindex liste-left)) :id (+ (+ jo jindex) 33000))
                         (location-costmap:publish-point  (cl-transforms:origin (nth jindex liste-front)) :id (+ (+ jo jindex) 44000))
                        (location-costmap:publish-point  (cl-transforms:origin (nth jindex liste-back )) :id (+ (+ jo jindex) 55000))
                        (location-costmap:publish-point  (cl-transforms:origin (nth jindex liste-up)) :id (+ (+ jo jindex) 66000))
                        (location-costmap:publish-point  (cl-transforms:origin (nth jindex liste-down)) :id (+ (+ jo jindex) 77000))                      
                          )))))
             (reverse elem)))


(defun list-the-values (num point)
  (let*((zet 1.0)
        (iks (cl-transforms:x point))
        (yps (cl-transforms:y point))
        (liste-tr NIL)
        (humanpose (tf-human-to-map))
        (temp '()))
    (cond((and (>= iks 0) 
               (<= yps 0))
          (setf liste-tr (the-function-up-right point iks yps zet num liste-tr humanpose)))
         ((and (<= iks 0)
               (<= yps 0))
          (setf liste-tr (the-function-down-right point iks yps zet num liste-tr humanpose)))
         ((and (<= iks 0) ;<=
               (>= yps 0)) ;>=
          (setf liste-tr (the-function-down-left point iks yps zet num liste-tr humanpose)))
         ((and (>= iks 0)
               (>= yps 0)) ;>=
          (setf liste-tr (the-function-up-left point iks yps zet num liste-tr humanpose)))
         (t()))
    (dotimes (index (length liste-tr))
     (setf temp (cons (cl-transforms:make-pose
                       (cl-transforms:origin (nth index liste-tr))
                       (cl-transforms:make-identity-rotation)) temp)))
    (reverse temp)))


  (defun the-function-down-left (point iks yps zet num liste-tr humanpose)
    ;(format t "func-down-left~%")
    (cond((and (< iks 0) 
               (> yps 0)
               (<= yps 0.1))
          (dotimes(index (length num))
                do (setf liste-tr (append liste-tr (list (get-gesture->relative-world (cl-transforms:make-3d-vector (+ (cl-transforms:x point) (* (- 0.85) index))  (+ (cl-transforms:y point)(* 0.1 index))  (+ (cl-transforms:z point) zet)) humanpose))))))
         ((and (< iks 0) 
               (> yps 0.1)
               (<= yps 0.3))
          (dotimes(index (length num))
                do (setf liste-tr (append liste-tr (list (get-gesture->relative-world (cl-transforms:make-3d-vector (+ (cl-transforms:x point) (* (- 0.7) index))  (+ (cl-transforms:y point)(* 0.25 index))  (+ (cl-transforms:z point) zet)) humanpose))))))
         ((and (< iks 0) 
               (> yps 0.3)
               (<= yps 0.4))
          (dotimes(index (length num))
                do (setf liste-tr (append liste-tr (list (get-gesture->relative-world (cl-transforms:make-3d-vector (+ (cl-transforms:x point) (* (- 0.6) index))  (+ (cl-transforms:y point)(* 0.4 index))  (+ (cl-transforms:z point) zet)) humanpose))))))
    ((and (< iks 0) 
               (> yps 0.4)
               (<= yps 0.5))
          (dotimes(index (length num))
                do (setf liste-tr (append liste-tr (list (get-gesture->relative-world (cl-transforms:make-3d-vector (+ (cl-transforms:x point) (* (- 0.4) index))  (+ (cl-transforms:y point)(* 0.6 index))  (+ (cl-transforms:z point) zet)) humanpose))))))
    ((and (< iks 0) 
               (> yps 0.5)
               (<= yps 0.6))
     (dotimes(index (length num))
                do (setf liste-tr (append liste-tr (list (get-gesture->relative-world (cl-transforms:make-3d-vector (+ (cl-transforms:x point) (* (- 0.3) index))  (+ (cl-transforms:y point)(* 0.7 index))  (+ (cl-transforms:z point) zet)) humanpose))))))
    ((and (< iks 0) 
          (> yps 0.6)
          (<= yps 0.7))
     (dotimes(index (length num))
                do (setf liste-tr (append liste-tr (list (get-gesture->relative-world (cl-transforms:make-3d-vector (+ (cl-transforms:x point) (* (- 0.2) index))  (+ (cl-transforms:y point)(* 0.8 index))  (+ (cl-transforms:z point) zet)) humanpose))))))
    ((and (< iks 0) 
          (> yps 0.7)
          (<= yps 0.9))
     (dotimes(index (length num))
       do (setf liste-tr (append liste-tr (list (get-gesture->relative-world (cl-transforms:make-3d-vector (+ (cl-transforms:x point) (* (- 0.1) index))  (+ (cl-transforms:y point)(* 0.9 index))  (+ (cl-transforms:z point) zet)) humanpose))))))
    ((and (= iks 0) 
          (> yps 0))
     (dotimes(index (length num))
                do (setf liste-tr (append liste-tr (list (get-gesture->relative-world (cl-transforms:make-3d-vector (cl-transforms:x point)  (+ (cl-transforms:y point)(* 0.5 index))  (+ (cl-transforms:z point) zet))humanpose))))))
             (t ()))
             liste-tr)
 
(defun the-function-down-right (point iks yps zet num liste-tr humanpose)
 ; (format t "func down rohjt ~%")
  (cond((and (< iks 0) 
             (= yps 0))
        (dotimes(index (length num))
        do (setf liste-tr (append liste-tr (list (get-gesture->relative-world (cl-transforms:make-3d-vector (+ (cl-transforms:x point) (* (- 0.5) index))  (cl-transforms:y point)  (+ (cl-transforms:z point) zet))humanpose))))))
       ((and (< iks 0) 
             (> yps -1)
             (<= yps -0.9))
        (dotimes(index (length num))
                do (setf liste-tr (append liste-tr (list (get-gesture->relative-world (cl-transforms:make-3d-vector (+ (cl-transforms:x point) (* (- 0.1) index))  (+ (cl-transforms:y point)(* (- 0.9) index))  (+ (cl-transforms:z point) zet)) humanpose))))))
       ((and (< iks 0) 
             (> yps -1)
             (> yps -0.9)
             (<= yps -0.8))
        (dotimes(index (length num))
                do (setf liste-tr (append liste-tr (list (get-gesture->relative-world (cl-transforms:make-3d-vector (+ (cl-transforms:x point) (* (- 0.2) index))  (+ (cl-transforms:y point)(* (- 0.8) index))  (+ (cl-transforms:z point) zet)) humanpose))))))
              ((and (< iks 0) 
             (> yps -1)
             (> yps -0.8)
             (<= yps -0.6))
               (dotimes(index (length num))
                do (setf liste-tr (append liste-tr (list (get-gesture->relative-world (cl-transforms:make-3d-vector (+ (cl-transforms:x point) (* (- 0.3) index))  (+ (cl-transforms:y point)(* (- 0.7) index))  (+ (cl-transforms:z point) zet)) humanpose))))))
              ((and (< iks 0) 
             (> yps -1)
             (> yps -0.6)
             (<= yps -0.5))
          (dotimes(index (length num))
            do (setf liste-tr (append liste-tr (list (get-gesture->relative-world (cl-transforms:make-3d-vector (+ (cl-transforms:x point) (* (- 0.4) index))  (+ (cl-transforms:y point)(* (- 0.6) index))  (+ (cl-transforms:z point) zet)) humanpose))))))
               ((and (< iks 0) 
             (> yps -1)
             (> yps -0.5)
             (<= yps -0.4))
                (dotimes(index (length num))
                do (setf liste-tr (append liste-tr (list (get-gesture->relative-world (cl-transforms:make-3d-vector (+ (cl-transforms:x point) (* (- 0.5) index))  (+ (cl-transforms:y point)(* (- 0.5) index))  (+ (cl-transforms:z point) zet)) humanpose))))))
               ((and (< iks 0) 
                     (> yps -1)
                     (> yps -0.4)
                     (<= yps -0.3))
                (dotimes(index (length num))
                do (setf liste-tr (append liste-tr (list (get-gesture->relative-world (cl-transforms:make-3d-vector (+ (cl-transforms:x point) (* (- 0.6) index))  (+ (cl-transforms:y point)(* (- 0.4) index))  (+ (cl-transforms:z point) zet)) humanpose))))))
                    ((and (< iks 0) 
                     (> yps -1)
                     (> yps -0.3)
                     (<= yps -0.2))
                     (dotimes(index (length num))
                do (setf liste-tr (append liste-tr (list (get-gesture->relative-world (cl-transforms:make-3d-vector (+ (cl-transforms:x point) (* (- 0.7) index))  (+ (cl-transforms:y point)(* (- 0.3) index))  (+ (cl-transforms:z point) zet)) humanpose))))))
                         ((and (< iks 0) 
                     (> yps -1)
                     (> yps -0.2)
                     (<= yps -0.1))
                          (dotimes(index (length num))
                do (setf liste-tr (append liste-tr (list (get-gesture->relative-world (cl-transforms:make-3d-vector (+ (cl-transforms:x point) (* (- 0.85) index))  (+ (cl-transforms:y point)(* (- 0.15) index))  (+ (cl-transforms:z point) zet)) humanpose))))))                    
             (t ()))
             liste-tr)  

(defun the-function-up-right (point iks yps zet num liste-tr humanpose)
  (cond((and (> iks 0)
             (= yps 0))
        (dotimes(index (length num))
                do (setf liste-tr (append liste-tr (list (get-gesture->relative-world (cl-transforms:make-3d-vector (+ (cl-transforms:x point) (* 0.5 index))  (cl-transforms:y point)  (+ (cl-transforms:z point) zet)) humanpose))))))
         ((and (> iks 0) ;;ok
               (< yps 0)
               (>= yps (- 0.2)))
          (dotimes(index (length num))
                do (setf liste-tr (append liste-tr (list (get-gesture->relative-world (cl-transforms:make-3d-vector (+ (cl-transforms:x point) (* 0.8 index))  (+ (cl-transforms:y point)(* (- 0.12) index))  (+ (cl-transforms:z point) zet)) humanpose))))))
         ((and (> iks 0) ;;ok
               (< yps 0)
               (< yps (- 0.2))
               (>= yps (- 0.4)))
          (dotimes(index (length num))
                do (setf liste-tr (append liste-tr (list (get-gesture->relative-world (cl-transforms:make-3d-vector (+ (cl-transforms:x point) (* 0.8 index))  (+ (cl-transforms:y point)(* (- 0.25) index))  (+ (cl-transforms:z point) zet)) humanpose))))))
         ((and (> iks 0) ;;ok
               (< yps 0)
               (< yps (- 0.4))
               (>= yps (- 0.5)))
          (dotimes(index (length num))
            do (setf liste-tr (append liste-tr (list (get-gesture->relative-world (cl-transforms:make-3d-vector (+ (cl-transforms:x point) (* 0.5 index))  (+ (cl-transforms:y point)(* (- 0.265) index))  (+ (cl-transforms:z point) zet)) humanpose))))))
  ((and (> iks 0) ;;ok
               (< yps 0)
               (< yps (- 0.5))
               (>= yps (- 0.6)))
           (dotimes(index (length num))
                do (setf liste-tr (append liste-tr (list (get-gesture->relative-world (cl-transforms:make-3d-vector (+ (cl-transforms:x point) (* 0.5 index))  (+ (cl-transforms:y point)(* (- 0.35) index))  (+ (cl-transforms:z point) zet)) humanpose))))))
  ((and (> iks 0) ;;ok
                (< yps 0)
                (< yps (- 0.6))
                (>= yps (- 0.7)))
          (dotimes(index (length num))
           do (setf liste-tr (append liste-tr (list (get-gesture->relative-world (cl-transforms:make-3d-vector (+ (cl-transforms:x point) (* 0.5 index))  (+ (cl-transforms:y point)(* (- 0.55) index))  (+ (cl-transforms:z point) zet)) humanpose))))))
          ((and (> iks 0) ;;ok
                (< yps 0)
                (< yps (- 0.7))
                (> yps (- 0.8)))
           (dotimes(index (length num))
             do (setf liste-tr (append liste-tr (list (get-gesture->relative-world (cl-transforms:make-3d-vector (+ (cl-transforms:x point) (* 0.5 index))  (+ (cl-transforms:y point)(* (- 0.6) index))  (+ (cl-transforms:z point) zet)) humanpose))))))
          ((and (> iks 0) ;;ok
                (< yps 0)
               (<= yps (- 0.8))
               (> yps (- 0.9)))
           (dotimes(index (length num))
             do (setf liste-tr (append liste-tr (list (get-gesture->relative-world (cl-transforms:make-3d-vector (+ (cl-transforms:x point) (* 0.35 index))  (+ (cl-transforms:y point)(* (- 0.7) index))  (+ (cl-transforms:z point) zet)) humanpose))))))
               ((and (> iks 0) ;;ok
                     (< yps 0)
               (<= yps (- 0.9))
               (>= yps (- 1)))
                (dotimes(index (length num))
                  do (setf liste-tr (append liste-tr (list (get-gesture->relative-world (cl-transforms:make-3d-vector (+ (cl-transforms:x point) (* 0.2 index))  (+ (cl-transforms:y point)(*  (- 0.99) index))  (+ (cl-transforms:z point) zet)) humanpose))))))             
             ((and (= iks 0) ;;ok
                   (< yps 0))
             (dotimes(index (length num))
                do (setf liste-tr (append liste-tr (list (get-gesture->relative-world (cl-transforms:make-3d-vector (cl-transforms:x point)  (+ (cl-transforms:y point)(* (- 0.4) index))  (+ (cl-transforms:z point) zet)) humanpose))))))
             (t ()))
             liste-tr)

(defun all-the-points-ups (liste)
  (let*((test '()))
    (dotimes (index (length liste))
      (setf test (cons 
            (cl-transforms:make-pose
             (cl-transforms:make-3d-vector (cl-transforms:x (cl-transforms:origin (nth index liste)))
                                           (cl-transforms:y (cl-transforms:origin (nth index liste)))
                                           (+ (cl-transforms:z (cl-transforms:origin (nth index liste))) 1))
             (cl-transforms:orientation (nth index liste))) test)))
    (reverse test)))

(defun the-function-up-left (point iks yps zet num liste-tr humanpose)
  (cond((and (> iks 0)
              (<= iks 0.1) 
              (> yps 0))
          (dotimes(index (length num))
                do (setf liste-tr (append liste-tr (list (get-gesture->relative-world (cl-transforms:make-3d-vector  (+ (cl-transforms:x point)  (* 0.1 index))  (+ (cl-transforms:y point) (* 0.5 index))  (+ (cl-transforms:z point) zet)) humanpose))))))
        ((and (> iks 0.1)
              (<= iks 0.3) 
              (> yps 0))
          (dotimes(index (length num))
            do (setf liste-tr (append liste-tr (list (get-gesture->relative-world (cl-transforms:make-3d-vector  (+ (cl-transforms:x point)  (* 0.25 index))  (+ (cl-transforms:y point) (* 0.5 index))  (+ (cl-transforms:z point) zet)) humanpose))))))
        ((and (> iks 0.3)
              (<= iks 0.5) 
              (> yps 0))
         (dotimes(index (length num))
                do (setf liste-tr (append liste-tr (list (get-gesture->relative-world (cl-transforms:make-3d-vector  (+ (cl-transforms:x point)  (* 0.4 index))  (+ (cl-transforms:y point) (* 0.5 index))  (+ (cl-transforms:z point) zet)) humanpose))))))
        ((and (> iks 0.5)
              (<= iks 0.7) 
              (> yps 0))
         (dotimes(index (length num))
                do (setf liste-tr (append liste-tr (list (get-gesture->relative-world (cl-transforms:make-3d-vector  (+ (cl-transforms:x point)  (* 0.6 index))  (+ (cl-transforms:y point) (* 0.4 index))  (+ (cl-transforms:z point) zet)) humanpose))))))
        ((and (> iks 0.7)
              (<= iks 0.8) 
              (> yps 0))
         (dotimes(index (length num))
                do (setf liste-tr (append liste-tr (list (get-gesture->relative-world (cl-transforms:make-3d-vector  (+ (cl-transforms:x point)  (* 0.7 index))  (+ (cl-transforms:y point) (* 0.3 index))  (+ (cl-transforms:z point) zet)) humanpose))))))
        ((and (> iks 0.8)
              (<= iks 0.9) 
              (> yps 0))
         (dotimes(index (length num))
                do (setf liste-tr (append liste-tr (list (get-gesture->relative-world (cl-transforms:make-3d-vector  (+ (cl-transforms:x point)  (* 0.8 index))  (+ (cl-transforms:y point) (* 0.2 index))  (+ (cl-transforms:z point) zet)) humanpose))))))
        ((and (> iks 0.9)
              (<= iks 1) 
              (> yps 0))
         (dotimes(index (length num))
                do (setf liste-tr (append liste-tr (list (get-gesture->relative-world (cl-transforms:make-3d-vector  (+ (cl-transforms:x point)  (* 0.9 index))  (+ (cl-transforms:y point) (* 0.1 index))  (+ (cl-transforms:z point) zet)) humanpose))))))
        (t()))
  liste-tr
  )

(defun all-the-points-downs (liste)
   ; (format t "all-downs~%")
   (let*((test '()))
    (dotimes (index (length liste))
      (setf test (cons 
            (cl-transforms:make-pose
             (cl-transforms:make-3d-vector (cl-transforms:x (cl-transforms:origin (nth index liste)))
                                           (cl-transforms:y (cl-transforms:origin (nth index liste)))
                                           (- (cl-transforms:z (cl-transforms:origin (nth index liste))) 1))
             (cl-transforms:orientation (nth index liste))) test)))
    (reverse test)))

(defun all-the-points-rights (liste)
  (let*((test '()))
    (dotimes (index (length liste))
      (setf test (cons 
                  (cl-transforms:make-pose
                   (cl-transforms:make-3d-vector (cl-transforms:x (cl-transforms:origin (nth index liste)))
                                                 (+ (cl-transforms:y (cl-transforms:origin (nth index liste))) 1)
                                                 (cl-transforms:z (cl-transforms:origin (nth index liste))))
                   (cl-transforms:orientation (nth index liste))) test)))
    (reverse test)))

(defun all-the-points-lefts (liste)
 ; (format t "all-lefts~%")
    (let*((test '()))
    (dotimes (index (length liste))
      (setf test (cons 
            (cl-transforms:make-pose
             (cl-transforms:make-3d-vector (cl-transforms:x (cl-transforms:origin (nth index liste)))
                                           (- (cl-transforms:y (cl-transforms:origin (nth index liste))) 1)
                                           (cl-transforms:z (cl-transforms:origin (nth index liste))))
             (cl-transforms:orientation (nth index liste))) test)))
    (reverse test)))

(defun all-the-points-fronts (liste)
  ;(format t "all-fronts~%")
  (let*((test '()))
    (dotimes (index (length liste))
      (setf test (cons 
            (cl-transforms:make-pose
             (cl-transforms:make-3d-vector (+ (cl-transforms:x (cl-transforms:origin (nth index liste))) 1)
                                           (cl-transforms:y (cl-transforms:origin (nth index liste)))
                                           (cl-transforms:z (cl-transforms:origin (nth index liste))))
            (cl-transforms:orientation (nth index liste))) test)))
    (reverse test)))

(defun all-the-points-backs (liste)
  ;(format t "all-backs~%")
    (let*((test '()))
    (dotimes (index (length liste))
      (setf test (cons 
            (cl-transforms:make-pose
             (cl-transforms:make-3d-vector (- (cl-transforms:x (cl-transforms:origin (nth index liste))) 1)
                                           (cl-transforms:y (cl-transforms:origin (nth index liste)))
                                           (cl-transforms:z (cl-transforms:origin (nth index liste))))
             (cl-transforms:orientation (nth index liste))) test)))
    (reverse test)))


;;###################################################################################################################################################################################################################################################################################################################GROUND FOR POINTING GESTURE#############################################################################################################################################;;
;; GROUND FOR GESTURE

(defun get-element-with-ground-calculation-based-on-gesture (vec)
  (let* ((sem-map  (sem-map:get-semantic-map))
         (elem NIL)
         (sem-hash (slot-value sem-map 'sem-map-utils:parts))
         (sem-keys (hash-table-keys sem-hash))
         (incrementer 0)
         (num (make-list 150))
         (valuable (list-the-values num vec)))
   ;; (format t "test~%")
    (let*((liste (calculated-five-down-levels valuable)))
       (dotimes (mo (length liste))
         do (let*((new-point (nth mo liste))
                  (smarter (+ (* 10 incrementer) 2)))
   (dotimes (jndex (length sem-keys))
               do(let* ((elem1 (first (get-bbox-as-aabb (nth jndex sem-keys) sem-hash)))
                        (elem2 (second (get-bbox-as-aabb (nth jndex sem-keys) sem-hash))))
                   (setf value
                         (semantic-map-costmap::inside-aabb elem1 elem2  (cl-transforms:origin new-point)))
                   (cond ((equal value T)
                            ;;(location-costmap::publish-point (cl-transforms:origin new-point) :id smarter)
                          (setf elem (append (list (nth jndex sem-keys)) elem))
                          (remove-duplicates elem))
                         (t   ;;(location-costmap::publish-point (cl-transforms:origin new-point) :id smarter)
                           )))
                (setf incrementer (+ incrementer 2))))))
              (reverse (remove-duplicates elem)))) 

;;
;;Getting the min and max values of a bounding box
;;
(defun get-bbox-as-aabb (name sem-hash)
(let*((dim-x (cl-transforms:x (slot-value (gethash name sem-hash) 'sem-map-utils:dimensions)))
      (dim-y (cl-transforms:y (slot-value (gethash name sem-hash) 'sem-map-utils:dimensions)))
      (dim-z (cl-transforms:z (slot-value (gethash name sem-hash) 'sem-map-utils:dimensions)))
      (pose-x (cl-transforms:x (cl-transforms:origin  (slot-value (gethash name sem-hash) 'sem-map-utils:pose))))
       (pose-y (cl-transforms:y (cl-transforms:origin  (slot-value (gethash name sem-hash) 'sem-map-utils:pose))))
      (min-vec (cl-transforms:make-3d-vector (- pose-x (/ dim-x 2))
                                             (- pose-y (/ dim-y 2))
                                             0))
      (max-vec (cl-transforms:make-3d-vector (+ pose-x (/ dim-x 2))
                                             (+ pose-y (/ dim-y 2))
                                             dim-z)))
  (cram-semantic-map-costmap::get-aabb min-vec max-vec)))

(defun calculated-five-down-levels (liste)
   (let*((test '()))
         (dotimes (index (length liste))
           do(loop for mass from 1 to 6
                   do(loop for jindex from 1 to 5
                           do(setf test (cons 
                                         (cl-transforms:make-pose
                                          (cl-transforms:make-3d-vector (cl-transforms:x (cl-transforms:origin (nth index liste)))
                                                                        (+ (cl-transforms:y (cl-transforms:origin (nth index liste))) (- 5 mass)) 
                                                                        (cl-transforms:z (cl-transforms:origin (nth index liste))))
                                          (cl-transforms:orientation (nth index liste))) test))
                             (setf test (cons 
                                         (cl-transforms:make-pose
                                          (cl-transforms:make-3d-vector (+ (cl-transforms:x (cl-transforms:origin (nth index liste))) (- 5 mass))
                                                                        (cl-transforms:y (cl-transforms:origin (nth index liste))) 
                                                          (cl-transforms:z (cl-transforms:origin (nth index liste))))
                                            (cl-transforms:orientation (nth index liste))) test))
(setf test (cons 
                                         (cl-transforms:make-pose
                                          (cl-transforms:make-3d-vector (cl-transforms:x (cl-transforms:origin (nth index liste)))
                                                          (- (cl-transforms:y (cl-transforms:origin (nth index liste))) (- 5 mass)) 
                                                          (cl-transforms:z (cl-transforms:origin (nth index liste))))
                                            (cl-transforms:orientation (nth index liste))) test))
                             
                (setf test (cons 
                            (cl-transforms:make-pose
                            (cl-transforms:make-3d-vector (- (cl-transforms:x (cl-transforms:origin (nth index liste))) (- 5 mass))
                                                          (cl-transforms:y (cl-transforms:origin (nth index liste)))  
                                                          (cl-transforms:z (cl-transforms:origin (nth index liste))))
                              (cl-transforms:orientation (nth index liste))) test)))))
                                   
    (reverse test)))

(defun get-gesture->relative-world (gesture-vec humanpose)
  (let*((ori (cl-transforms:make-3d-vector (+ (cl-transforms:x (cl-transforms:origin humanpose)) (cl-transforms:x gesture-vec))
                                          (+ (cl-transforms:y (cl-transforms:origin humanpose)) (cl-transforms:y gesture-vec))
                                          (+ (cl-transforms:z (cl-transforms:origin humanpose)) (cl-transforms:z gesture-vec))))
        (pose  (cl-transforms-stamped:make-pose ori (cl-transforms:orientation humanpose))))
    pose))

(defun checker-at-distance (ffpoint sspoint)
  (let*((spoint (cl-transforms:make-pose sspoint (cl-transforms:make-identity-rotation)))
        (fpoint (cl-transforms:make-pose ffpoint (cl-transforms:make-identity-rotation)))
        (fsec (sqrt (+ (square (- (cl-transforms:x (cl-transforms:origin spoint))
                                   (cl-transforms:x (cl-transforms:origin fpoint))))
                        (square (- (cl-transforms:y (cl-transforms:origin spoint))
                                   (cl-transforms:y (cl-transforms:origin fpoint))))
                        (square (- (cl-transforms:z (cl-transforms:origin spoint))
                                   (cl-transforms:z (cl-transforms:origin fpoint)))))))
        (forw2 (sqrt (+ (square (- (cl-transforms:x (cl-transforms:origin spoint))
                                   (+ (cl-transforms:x (cl-transforms:origin fpoint)) 1)))
                        (square (- (cl-transforms:y (cl-transforms:origin spoint))
                                   (cl-transforms:y (cl-transforms:origin fpoint))))
                        (square (- (cl-transforms:z (cl-transforms:origin spoint))
                                   (cl-transforms:z (cl-transforms:origin fpoint)))))))
        (backw2 (sqrt (+ (square (- (cl-transforms:x (cl-transforms:origin spoint))
                                   (- (cl-transforms:x (cl-transforms:origin fpoint)) 1)))
                        (square (- (cl-transforms:y (cl-transforms:origin spoint))
                                   (cl-transforms:y (cl-transforms:origin fpoint))))
                        (square (- (cl-transforms:z (cl-transforms:origin spoint))
                                   (cl-transforms:z (cl-transforms:origin fpoint)))))))
        (right2 (sqrt (+ (square (- (cl-transforms:x (cl-transforms:origin spoint))
                                    (cl-transforms:x (cl-transforms:origin fpoint))))
                         (square (- (cl-transforms:y (cl-transforms:origin spoint))
                                    (-  (cl-transforms:y (cl-transforms:origin fpoint)) 1)))
                        (square (- (cl-transforms:z (cl-transforms:origin spoint))
                                   (cl-transforms:z (cl-transforms:origin fpoint)))))))
        (left2 (sqrt (+ (square (- (cl-transforms:x (cl-transforms:origin spoint))
                                    (cl-transforms:x (cl-transforms:origin fpoint))))
                         (square (- (cl-transforms:y (cl-transforms:origin spoint))
                                    (+  (cl-transforms:y (cl-transforms:origin fpoint)) 1)))
                        (square (- (cl-transforms:z (cl-transforms:origin spoint))
                                   (cl-transforms:z (cl-transforms:origin fpoint)))))))
        (up2 (sqrt (+ (square (- (cl-transforms:x (cl-transforms:origin spoint))
                                    (cl-transforms:x (cl-transforms:origin fpoint))))
                         (square (- (cl-transforms:y (cl-transforms:origin spoint))
                                    (cl-transforms:y (cl-transforms:origin fpoint))))
                        (square (- (cl-transforms:z (cl-transforms:origin spoint))
                                   (+ (cl-transforms:z (cl-transforms:origin fpoint)) 2))))))
        (down2 (sqrt (+ (square (- (cl-transforms:x (cl-transforms:origin spoint))
                                 (cl-transforms:x (cl-transforms:origin fpoint))))
                      (square (- (cl-transforms:y (cl-transforms:origin spoint))
                                 (cl-transforms:y (cl-transforms:origin fpoint))))
                      (square (- (cl-transforms:z (cl-transforms:origin spoint))
                                 (+ (cl-transforms:z (cl-transforms:origin fpoint)) 2))))))
        (all (append (append (append (append (append (append (append '() (list fsec)) (list forw2)) (list backw2)) (list right2)) (list left2)) (list up2)) (list down2)))
        (value NIL))
    (dotimes(index (length all))
      (if (and (>= 2 (nth index all))
               (null value))
          (setf value T)))
  value))

(defun square (n)
  (* n n))
